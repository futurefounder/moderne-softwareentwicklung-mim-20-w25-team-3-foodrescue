name: CI + Pages

# GIBT dem GITHUB_TOKEN Schreibrechte auf den Code (für gh-pages Push)
# test
permissions:
  contents: write

on:
  push:
  pull_request:

jobs:
  backend:
    name: Build & Test (Backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build, Test & Coverage
        run: mvn -B -q spotless:check test jacoco:report

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/target/site/jacoco

  frontend:
    name: Lint & Build (Frontend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      # Packe IMMER in ./frontend/frontend_out (auch wenn es keinen Build gibt)
      - name: Package frontend output
        run: |
          rm -rf frontend_out
          mkdir -p frontend_out
          if npm run | grep -q "^  build"; then
            npm run build
            if [ -d dist ]; then
              cp -r dist/. frontend_out/
            else
              echo "Build lief, aber kein dist/-Ordner gefunden – packe Projekt-Root."
              rsync -a --exclude 'node_modules' ./ frontend_out/
            fi
          else
            echo "Kein build-Script – packe statisches Frontend."
            rsync -a --exclude 'node_modules' ./ frontend_out/
          fi

      - name: Upload Frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-bundle
          path: frontend/frontend_out        # <— vorher: frontend_out
          if-no-files-found: error

  publish:
    name: Publish GitHub Pages (Frontend + Reports)
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Frontend bundle
        uses: actions/download-artifact@v4
        with:
          name: frontend-bundle
          path: _site_tmp_frontend

      - name: "Debug: list downloaded artifact"
        run: |
          echo "== artifact (tree, up to 3 levels) =="
          find _site_tmp_frontend -maxdepth 3 -print
          echo "== ls -la =="
          ls -la _site_tmp_frontend || true

      - name: Prepare Frontend output
        run: |
          set -e
          mkdir -p _site

          # Mögliche Layouts des Artefakts nacheinander prüfen:
          if   [ -d "_site_tmp_frontend/frontend/frontend_out" ]; then SRC="_site_tmp_frontend/frontend/frontend_out"
          elif [ -d "_site_tmp_frontend/frontend_out" ];         then SRC="_site_tmp_frontend/frontend_out"
          elif [ -d "_site_tmp_frontend/dist" ];                 then SRC="_site_tmp_frontend/dist"
          elif [ -d "_site_tmp_frontend/frontend/dist" ];        then SRC="_site_tmp_frontend/frontend/dist"
          else
            # Falls keine Unterordner da sind, könnten die Dateien direkt im Root liegen.
            # Dann prüfen wir auf eine typische Index-Datei.
            if ls -A _site_tmp_frontend >/dev/null 2>&1; then
              SRC="_site_tmp_frontend"
            else
              echo "ERROR: Could not locate frontend output in _site_tmp_frontend" >&2
              exit 1
            fi
          fi

          echo "Using SRC=$SRC"
          cp -r "$SRC/." _site/

          # SPA-Fallback
          if [ -f "_site/index.html" ]; then cp _site/index.html _site/404.html; fi

          echo "== site root =="
          ls -la _site || true
      

      - name: Build Maven site (Reports)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - run: |
          cd backend
          mvn -B -DskipTests=false site jacoco:report
          cd ..
          mkdir -p _site/reports
          cp -r backend/target/site/. _site/reports/

      - name: Disable Jekyll
        run: touch _site/.nojekyll

      - name: Set destination dir (main → root, dev → previews/dev)
        id: dest
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "dir=" >> $GITHUB_OUTPUT
            echo "keep=false" >> $GITHUB_OUTPUT
          else
            echo "dir=previews/dev" >> $GITHUB_OUTPUT
            echo "keep=true" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: _site
          destination_dir: ${{ steps.dest.outputs.dir }}
          keep_files: ${{ steps.dest.outputs.keep }}
          commit_message: "ci: deploy (${{ github.ref_name }}) from ${{ github.sha }}"
